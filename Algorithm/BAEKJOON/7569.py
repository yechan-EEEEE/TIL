"""
토마토는 격자모양 상자의 칸에 하나씩 넣고, 상자들을 수직으로 쌓아 올려 창고에 보관한다.
토마토는 익은 것과, 익지 않은 토마토들이 있다.
보관 후 하루가 지나면, 익은 토마토들의 위, 아래, 왼쪽, 오른쪽, 앞, 뒤 여섯 방향의 인접한 토마토들은 익게 된다.
대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정한다.
철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지 그 최소 일수를 알고 싶어 한다.
며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라.
단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.

첫 줄에는 상자의 크기를 나타내는 두 정수 M,N과 쌓아올려지는 상자의 수를 나타내는 H가 주어진다.
M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 단, 2 ≤ M ≤ 100, 2 ≤ N ≤ 100, 1 ≤ H ≤ 100 이다.
둘째 줄부터는 가장 밑의 상자부터 가장 위의 상자까지에 저장된 토마토들의 정보가 주어진다.
즉, 둘째 줄부터 N개의 줄에는 하나의 상자에 담긴 토마토의 정보가 주어진다.
각 줄에는 상자 가로줄에 들어있는 토마토들의 상태가 M개의 정수로 주어진다.
정수 1은 익은 토마토, 정수 0 은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다. 이러한 N개의 줄이 H번 반복하여 주어진다.
토마토가 하나 이상 있는 경우만 입력으로 주어진다

여러분은 토마토가 모두 익을 때까지 최소 며칠이 걸리는지를 계산해서 출력해야 한다.
만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.

5 3 1
0 -1 0 0 0
-1 -1 0 1 1
0 0 0 1 1
            -1

5 3 2
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 1 0 0
0 0 0 0 0
            4

[1][1][2] == 1
다음은
[1][1][1]
[1][1][3]
[1][0][2]
[1][2][2]
[0][1][2]
[2][1][2]

dxyz = [(0, 0, -1), (0, 0, 1), (0, -1, 0), (0, 1, 0), (-1, 0, 0), (1, 0, 0)]

4 3 2
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
-1 -1 -1 -1
1 1 1 -1
            0

익은 토마토: 1 익지 않은 토마토: 0 빈칸: -1
처음부터 모든 토마토가 익어있다 = 처음 주어진 숫자에 0이 없으면 0 출력
토마토가 모두 익지 못하는 상황 = -1에 갇혀있는 0 있으면 -1 출력

bfs 돌다가 전부 1 되면 카운트 출력
queue 비면 카운트 출력
1 나온 곳부터 bfs
bfs 끝나고 arr 에 0 있으면 -1
"""
from collections import deque


def bfs():
    queue = deque()
    cnt = -1  # BFS 레벨 카운트용 (첫 날 0 되게)

    # 익은 토마토(1) 모두 큐에 추가 - 동시에 퍼지기 위해
    for z in range(H):
        for y in range(N):
            for x in range(M):
                if tomato[z][y][x] == 1:
                    queue.append((z, y, x))

    while queue:
        for _ in range(len(queue)):  # 같은 날짜에 익는 토마토 처리
            z, y, x = queue.popleft()
            for dz, dy, dx in dxyz:
                nz, ny, nx = z + dz, y + dy, x + dx
                if 0 <= nz < H and 0 <= ny < N and 0 <= nx < M:
                    if tomato[nz][ny][nx] == 0:  # 안 익은 토마토면 익히기
                        tomato[nz][ny][nx] = 1
                        queue.append((nz, ny, nx))
        cnt += 1

    return cnt


M, N, H = map(int, input().split())
tomato = [[list(map(int, input().split())) for _ in range(N)] for _ in range(H)]
dxyz = [(1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, -1, 0), (0, 0, 1), (0, 0, -1)]

result = bfs()  # 토마토는 무조건 하나 이상 들어있어서 result 는 최소 0

for layer in tomato:
    for row in layer:
        if 0 in row:
            result = -1
            break
    if result == -1:
        break
print(result)
